DP - enhanced recurssion

Solving DP question using
    Matrix - this is known as top down approach

Identification
    - Choice
    - Optimal - min, max, largest etc
    - Recursion with two calls OR overlapping calls then its a dp question

Recursion  --> Memoization --> Top-Down
recursive memoized solution is basically top down approach and using 2D array is bottom-up

Questions
1. 0-1 knapsack -[6]
   1. Subset Sum
   2. Equal sum partition
   3. Count of subset sum with a given sum
   4. Minimum subset sum difference
   5. Count the number of subset with a given difference
   6. Target Sum
2. Unbounded knapsack -[5]
   1. Rod cutting problem
   2. Coin change problem - Maximum number of ways
   3. Coin change problem - Minimum number of coins
   4. Ribbon cut problem
3. Fibonacci -[7]
4. LCS -[15]
5. LIS -[10]
6. Kadane's algorithm -[6]
7. Matrix chain multiplication -[7]
8. DP on trees -[4]
9. DP on grids -[14]
10. Others -[5]

Base condition of recursion- valid smallest input
Memoization along with recursive is itself the TOPDOWN approach. Iterative is called Bottom-up

the tabulation approach is not top-down but bottom-up. It is called  bottom-up, because we start the solution from base case (initialize matrix using base case) and build the solution to the top (t[n][w] in this case).

0-1 knapsack -[6]
    1. 0-1 knapsack
        public static int knapsackRecursionMemoization(int[] wt, int[] val, int w, int n, int[][] dp) {
            //base condition either weight is zero or there is no value
            if (n == 0 || w == 0)
                return 0;

            if (dp[n][w] != -1) // already having value for n and w then return
                return dp[n][w];

            // Return the maximum of two cases:
            // (1) nth item included
            // (2) not included
            if (wt[n - 1] <= w)
                return dp[n][w] = Math.max(val[n - 1] + knapsackRecursionMemoization(wt, val, w - wt[n - 1], n - 1, dp), knapsackRecursionMemoization(wt, val, w, n - 1, dp));
            else // if(wt[n-1]>w)
                return dp[n][w] = knapsackRecursionMemoization(wt, val, w, n - 1, dp);
        }


    Base condition changes to initialization for tabular form.

    2. Count of subset sum with a given sum
        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - set[i - 1]];

    3. Minimum subset sum difference - [Imp]
        - get the last row of dp matrix till half
        - Math.main(min,range-2s);
        int mx = -1;
        for (int j = 0 ; j < sum / 2 + 1 ; j++) {
            if (dp[n][j] == true)
                mx = j;
        }

    4. Count the number of subset with a given difference/Target Sum
        - Count of subset sum with a given sum


Unbounded knapsack -[5]
    1. Rod cutting problem - Exactly same
    2. Coin change problem - Maximum number of ways




