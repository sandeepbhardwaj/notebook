Reverse
============================
1. Reverse the array

2.  Reverse integer (without using long) - https://leetcode.com/problems/reverse-integer/
	Code:
	- 	tricky if you can't store the output in long, overflow cases are important
		temp = rev * 10 + pop; statement can cause overflow.

		Integer.MIN_VALUE = -2147483648  , Integer.MAX_VALUE = 2147483647


		if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0; // why 7 ? because due to max value
		if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0; // why -8 ? because due to min value
	      

3. Reverse string recursively
	Code:
		return reverse(str.substring(1)) + str.charAt(0);

4. Reverse Words in a String (ReverseWords) - https://leetcode.com/problems/reverse-words-in-a-string-iii/

Similar 
	- Reverse Only Letters - https://leetcode.com/problems/reverse-only-letters/


Rotate
============================
5. Write a program to cyclically rotate an array by one. - Reversal algorithm - https://leetcode.com/problems/rotate-array/
	Code:
		//reverse complete array
		reverse(nums, 0, nums.length - 1);
		//reverse k elements
		reverse(nums, 0, k - 1);
		//reverse k to n elements
		reverse(nums, k, nums.length - 1);

6. Kadane’s Algorithm - Maximum Subarray
	Code:
		max_end_here=Math.max(num,max_end_here+num);        
	    max_so_far=Math.max(max_so_far,max_end_here);

	Code: To find indexes of start and end of the subarray
	for (int i = 1; i < nums.length; i++) {
		// add current element to running sum
		max_ending_here = max_ending_here + nums[i];

		if (max_ending_here < nums[i]) {
			max_ending_here = nums[i];
			tempStart = i; // reset the temp start
		}

		if (max_ending_here > max_so_far) {
			max_so_far = max_ending_here;
			start = tempStart;
			end = i;
		}
	}

7. Best Time to Buy and Sell Stock - https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
	- Similar to kadane's algo


PreSum - SubArray
============================
8. Largest Subarray with 0 sum - https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1
	Code:
	if (preSum.containsKey(currSum)) {}

9. Find subarray with given sum - https://www.geeksforgeeks.org/find-subarray-with-given-sum/
	- Positive Numbers - if numbers are non negative then we can use two pointer approach (ContinuousSubArrayWithGivenSum)
	- With Negative numbers - can be done using preSum.
	Code:
		arr =    1 2 2 1 1    find=4
		preSum = 1 3 5 6 7    preSum.containsKey(currentSum - k) => preSum.containsKey(5 - 4)
		Similar to que 8. 

10. Subarray Sum Equals K (Count of all subarrays)- https://leetcode.com/problems/subarray-sum-equals-k/ - Again
	- key as preSum and value as frequency

Similar
	- Longest Subarray of sum K



Sliding Window
============================

----------------------------
Fixed Size Window
----------------------------
10.  Max sum of 'k' consecutive elements in the array - MaxSumSubArrayOfSizeK
	Code
	if (right - left + 1 < k) { //if window is smaller than k , increase window size
		right++; 
	} 
	else if (right - left + 1 == k) { // window is equal to k
		left++; // reduce the window
	}

11. Ist -ve number in every window of Size K (IstNegativeInWindowOfSizeK)- use queue

12. Find All Anagrams in a String / Count Occurrences of Anagrams [Imp] - https://leetcode.com/problems/find-all-anagrams-in-a-string/
	Code: Brute Force
	N= str len , n= ptr len
	for (int i = 0; i <= N - n; i++) {

	    String s = text.substring(i, i + n);

	    // Check if the word and substring are
	    // anagram of each other.
	    if (araAnagram(word, s))
	        res++;
	}

13. Maximum of all subarrays of size k (SlidingWindowMaximum) - use heap to get max element
	Code
	PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());

	queue.remove(nums[left]); // imp remove the left element. Don't do queue.poll()

14. Minimum Window Substring[Imp]

----------------------------
Variable Size Window
----------------------------

15. Longest Substring Without Repeating Characters - use set to find out the longest substr simple
16. Longest Substring With K Unique Characters [Imp] - TODO 


============================
Binary Search
============================
Code
	int mid = low + ((high - low) / 2);

17. FirstAndLastPositionOfElementInSortedArray

18. SearchInRotatedSortedArray
	Code
		// V.V.IMP why we are considering mid here not mid-1 ?
		// if we do mid-1 it may throw IndexOutOfBoundsException if [mid] points to 0
		if (nums[low] <= nums[mid]) { }//left part is sorted

19. SearchInRotatedSortedArrayWithDuplicates
	Code
	// if none of the part is sorted
	if (nums[low] == nums[mid] && nums[high] == nums[mid]) { // Imp step
		++low;
		--high;
	}
	// left part is sorted
	else if (nums[low] <= nums[mid]) {
		if (nums[low] <= target && target < nums[mid]) {
			high = mid - 1;
		} else {
			low = mid + 1;
		}
	}
	// second half is sorted
	else {
		if (nums[mid + 1] <= target && target <= nums[high]) {
			low = mid + 1;
		} else {
			high = mid - 1;
		}
	}

20. PeakIndexInMountainArray/Find Peak Element
	Code
	// low should be always smaller than high to avoid ArrayIndexOutOfBoundException
	while (low < high) {
		int mid = low + (high - low) / 2;

		if (A[mid] < A[mid + 1]) { // mid is smaller than its next element
			low = mid + 1;
		} else if (A[mid] < A[mid - 1]) { // mid is smaller than its previous element
			high = mid;
		} else { // mid is greater than it's prev and next element
			return mid;
		}
	}

21. FindMinimumInRotatedSortedArray - Pivot element - TODO
	Code
	// why < not <= ? because we want to partition of array not looking for target element
	// DO NOT use left <= right because that would loop forever
	while (low < high) {
		int mid = low + ((high - low) / 2);

		if (nums[mid] < nums[high]) {
			high = mid;
		} else if (nums[mid] > nums[high]) {
			low = mid + 1;
		}
	}
	return nums[low];

Pivot element
	Given an sorted integer array of size N which is also rotated by an unknown position. Input Array is not monotonically increasing as it is rotated at some unknown pivot element. We have to find the pivot element of array.
	Pivot element is the only element in input array which is smaller than it's previous element. A pivot element divided a sorted rotated array into two monotonically increasing array.
	In sorted and rotated array, pivot element(minimum element) is the only element which is smaller than it's previous element.


============================
Misc
============================
- SortColors
- PascalTriangle
	Code
	// First and last values in every row are 1
	if (j == 0 || j == i) {
		list.add(1);
	} else {
		// get the above row
		List<Integer> prev = result.get(i - 1);
		// get the above elements
		list.add(prev.get(j - 1) + prev.get(j));
	}

- MajorityElement (N/2)- Moore’s Voting Algorithm

- Merge Intervals
	Code
	Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
	return result.toArray(new int[result.size()][]);

	Note :- Arrays.sort uses dual-pivot Quicksort on primitives. It offers O(n log(n)) performance and is typically faster than traditional (one-pivot) Quicksort implementations. However, it uses a stable, adaptive, iterative implementation of mergesort algorithm for Array of Objects.
	According to Java 7 API docs cited, Arrays#Sort() for object arrays now uses TimSort, which is a hybrid of MergeSort and InsertionSort

- Find the duplicate in an array of N+1 integers
	Hint: Linked List cycle method – Imp

- Implement Pow(x,n) | X raised to the power N
	approach : Using Binary Exponentiation
	Code
		if (temp_n % 2 == 1) {
			ans = ans * x;
			temp_n = temp_n - 1;
		} else {
			x = x * x;
			temp_n = temp_n / 2;
		}

- Find the Majority Element that occurs more than N/2 times - Moore’s Voting Algorithm
- Majority Elements (>N/3 times) - Extended Boyer Moore’s Voting Algorithm

- Longest Consecutive Sequence in an Array - [Imp]

- MultiplyStrings
- Sieve of Eratosthenes
- LargestNumber - use comparator
- FirstMissingSmallestPositiveInteger
- RomanToInteger, AncestralNames

- Next Permutation
	Step 1: - Find the first decreasing sequence from end. Example {1, 1, 5, 4, 1} 
	Step 2: - Find number just greater element than element found at step 1. Example arr[1] and swap the two numbers
	{1, 1, 5, 4, 1} >> swap {1, 4, 5, 1, 1} 
	Step 3: - Reverse rest of the elements, from i+1 index
	{1, 4, 5, 1, 1} >> {1, 4, 1, 1, 5}

