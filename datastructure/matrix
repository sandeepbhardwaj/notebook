1. Set Matrix Zero
    Using two dummy arrays for row and column
    Code
        if(dummy1[i]==0  || dummy2[j]==0) then arr[i][j]=0,else continue.

2. Transpose matrix
    Code
    for (int i = 0; i < n; i++) {
        //j < i â€“ all the elements till diagonal
        for (int j = 0; j < i; j++) {
            //swap
        }
    }

    OR
    for (int i = 0; i < row; i++) {
        for (int j = i; j < column; j++) { // M.Imp Why j= i ?
            //swap
        }
    }

3. Rotate image by 90 degree
    Code
    static int[][] rotate(int[][] matrix) {
        int n = matrix.length;
        int rotated[][] = new int[n][n];
        for (int row = 0; row < n; row++) {
            for (int col = 0; col < n; col++) {
                rotated[col][n - row - 1] = matrix[row][col]; // last column (n-row-1)
            }
        }
        return rotated;
    }

    Without using extra space
    Step 1. transpose matrix
    Step 2: reverse elements
    Code
    for (int i = 0; i < n; i++) {
        for (int left = 0, right = n - 1; left < right; left++, right--) {
            //swapping first element with last element
            int temp = matrix[i][left];
            matrix[i][left] = matrix[i][right];
            matrix[i][right] = temp;
        }
    }

    OR

    public void reflect(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[i][n - j - 1]; // add last element in first
                matrix[i][n - j - 1] = tmp; // add first element in last
            }
        }
    }

4. Search in a sorted 2D matrix
    Code
    int val= matrix[mid/col][mid%col];

5. Grid Unique Paths | Count paths from left-top to the right bottom of a matrix
    Code
    public int countPaths(int i,int j,int n,int m){
        if(i==(n-1)&&j==(m-1)) return 1;
        
        if(i>=n||j>=m) return 0;
        // move down (i+1) , move right (j+1)
        else return countPaths(i+1,j,n,m)+countPaths(i,j+1,n,m); 
    }

6. Reshape Matrix
    reshaped[i / c][i % c] = nums[i / n][i % n];

7. MaxAreaOfIsland
    return 1 + dfs(row-1,col) + dfs(row+1,col) + dfs(row,col-1) + dfs(row,col+1);

 8. ValidSudoku
    if (!seen.add(number + " in row " + i) || !seen.add(number + " in column " + j) || !seen.add(number + " in block " + i / 3 + "-" + j / 3))
        return false;

9. Spiral Matrix
    int left = 0, right = column - 1, top = 0, bottom = row - 1;

